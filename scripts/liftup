#!/bin/python3

from urllib.parse import quote
from pandocfilters import toJSONFilter, RawInline
from pkg_resources import resource_filename

from gcd.nix import sh, sh_quote, path, cmd, env, sys


def codecogs(key, value, format, meta):
    if key == 'Math':
        inline = value[0]['t'] == 'InlineMath'
        latex = '\\inline ' + value[1] if inline else value[1]
        url = 'http://latex.codecogs.com/gif.latex?' + quote(latex)
        if format.startswith('markdown'):
            return RawInline('markdown', '![](%s)' % url)
        elif format == 'html':
            return RawInline('html', '<img src="%s"></img>' % url)


@cmd.run
def main():
    """Convert any input supported by pandoc to html (page or snippet), pdf
    (via pdflatex) or github flavored markdown (aka gfm). Include formulas as
    mathjax or codecogs urls.
    """

    if '_CODECOGS' in env:
        toJSONFilter(codecogs)
        sys.exit(0)

    cmd.arg('--type', '-t', default='html',
            choices=['html', 'pdf', 'gfm', 'snippet'],
            help='Output type, by default html.')
    cmd.arg('--mathimg', '-m', action='store_true',
            help='Render math as image url. Always true for -t gfm.')
    cmd.arg('input',
            help='Input file in any format supported by pandoc.')
    cmd.arg('output', nargs='?',
            help='Output file, by default input file with replaced extension.')
    args = cmd.args

    if not args.output:
        args.output = path.splitext(args.input)[0] + (
            '.pdf' if args.type == 'pdf' else '.html')

    pandoc = 'pandoc -S -c %s -o %s' % (
        sh_quote(resource_filename('gcd', 'resources/github.css')),
        sh_quote(args.output))

    if args.type == 'snippet':
        pandoc += ' -t html --template=' + sh_quote(
            resource_filename('gcd', 'resources/snippet.html'))
    elif args.type == 'gfm':
        pandoc += ' -s -t markdown_github'
        args.mathimg = True
    else:
        pandoc += ' -s -t ' + ('latex' if args.type == 'pdf' else 'html')

    if args.mathimg:
        pandoc = '_CODECOGS=1 ' + pandoc + ' --filter liftup'
    else:
        pandoc += ' --mathjax'

    if args.input.endswith('.md'):
        extensions = '+lists_without_preceding_blankline+autolink_bare_uris'
        pandoc += ' -f markdown' + extensions

    sh(pandoc + ' ' + sh_quote(args.input))

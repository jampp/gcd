#!/bin/python3

import shutil

from urllib.parse import quote
from pandocfilters import toJSONFilters, RawInline
from pkg_resources import resource_filename

from gcd.nix import sh, sh_quote, path, cmd, env, sys, os


def latexmk():
    assert (args.type or 'pdf') == 'pdf' and not args.mathimg
    sh(('latexmk -pdf -g -latexoption=-file-line-error '
        '-interaction=nonstopmode -outdir=%s %s', tmpdir, args.input))
    shutil.move('%s/%s.pdf' % (tmpdir, name), args.output or '%s.pdf' % base)


def pandoc():
    args.type = args.type or 'html'
    if args.type == 'pdf':
        original_output = args.output
        args.output = '%s/%s.tex' % (tmpdir, name)
    else:
        args.output = args.output or '%s.html' % base

    pandoc = 'pandoc -S -o ' + sh_quote(args.output)

    if args.type == 'html':
        pandoc += ' -s -t html -c ' + sh_quote(
            resource_filename('gcd', 'resources/github.css'))
    elif args.type == 'pdf':
        pandoc += ' -s -t latex -V ' + sh_quote(
            'header-includes=\hypersetup{pdfborderstyle={/S/U/W 1}}')
    elif args.type == 'gfm':
        pandoc += ' -s -t markdown_github'
        args.mathimg = True
    else:  # snippet
        pandoc += ' -t html --template=' + sh_quote(
            resource_filename('gcd', 'resources/snippet.html'))

    if args.mathimg:
        pandoc = '_DOCDOC_FILTER=codecogs ' + pandoc + ' --filter docdoc'
    else:
        pandoc += ' --mathjax'

    if args.citeproc:
        pandoc += ' --filter pandoc-citeproc'

    if args.crossref:
        pandoc += ' --filter pandoc-crossref'

    if path.splitext(args.input)[1] == '.md':
        extensions = '+lists_without_preceding_blankline+autolink_bare_uris'
        pandoc += ' -f markdown' + extensions

    sh(pandoc + ' ' + sh_quote(args.input))

    if args.type == 'pdf':
        args.input, args.output = args.output, original_output
        latexmk()


def codecogs(key, value, format, meta):
    if key == 'Math':
        inline = value[0]['t'] == 'InlineMath'
        latex = '\\inline ' + value[1] if inline else value[1]
        url = 'http://latex.codecogs.com/gif.latex?' + quote(latex)
        if format.startswith('markdown'):
            return RawInline('markdown', '![](%s)' % url)
        elif format == 'html':
            return RawInline('html', '<img src="%s"></img>' % url)


@cmd.run
def main():
    """Convert tex to pdf or any input supported by pandoc to html (page or
    snippet), pdf or github flavored markdown (gfm). In html output, include
    formulas as mathjax or codecogs urls.
    """

    if '_DOCDOC_FILTER' in env:
        toJSONFilters([globals()[name]
                       for name in env['_DOCDOC_FILTER'].split(',')])
        sys.exit(0)

    cmd.arg('input',
            help='Input file in tex or any format supported by pandoc.')
    cmd.arg('--output', '-o',
            help="""Output file, by default the path of the input file with an
                 appropriate extension inferred from the output type.""")
    cmd.arg('--type', '-t', choices=['html', 'pdf', 'gfm', 'snippet'],
            help="""Output type, by default pdf for tex input and html for
                 other input types. Only pdf is compatible with tex input.""")
    cmd.arg('--mathimg', '-m', action='store_true',
            help='Render math as image url. Always true for gfm output.')
    cmd.arg('--citeproc', '-c', action='store_true',
            help='Use the pandoc-citeproc filter.')
    cmd.arg('--crossref', '-r', action='store_true',
            help='Use the pandoc-crossref filter.')

    global args, base, name, tmpdir
    args = cmd.args
    base, ext = path.splitext(args.input)
    name = path.basename(base)
    tmpdir = '/tmp/docdoc/%s' % path.abspath(args.input).replace('/', '#')[1:]
    os.makedirs(tmpdir, exist_ok=True)
    if ext in ('.tex', '.latex'):
        latexmk()
    else:
        pandoc()
